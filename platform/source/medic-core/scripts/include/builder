#!/bin/bash

log()
{
  local name="$1"
  local is_silent="$2"

  logger "$name" "$platform" "$is_silent"
}

apply_regex_to_cflags()
{
  local regex="$1"

  export CFLAGS="`echo "$CFLAGS" | sed -E "$regex"`"
  export CXXFLAGS="`echo "$CXXFLAGS" | sed -E "$regex"`"
  export CFLAGS_SIMPLE="`echo "$CFLAGS_SIMPLE" | sed -E "$regex"`"
  export CXXFLAGS_SIMPLE="`echo "$CXXFLAGS_SIMPLE" | sed -E "$regex"`"
}

ldflags_in_cflags()
{
  export CFLAGS="$CFLAGS $LDFLAGS"
  export CXXFLAGS="$CXXFLAGS $LDFLAGS"
}

disable_parallelism()
{
  export MAKE="`echo "$MAKE" | sed -E 's/--?j(obs)? *[0-9]+//g;'`"
}

disable_stack_protector()
{
  apply_regex_to_cflags 's/ *-fstack-protector[A-Za-z0-9-]*//g;'
}

disable_stack_protector_strong()
{
  apply_regex_to_cflags 's/ *-fstack-protector-strong[A-Za-z0-9-]*//g;'
}

weaken_fortify_source()
{
  apply_regex_to_cflags 's/ *-D_FORTIFY_SOURCE=2/ -D_FORTIFY_SOURCE=1/g;'
}

disable_fortify_source()
{
  apply_regex_to_cflags 's/ *-D_FORTIFY_SOURCE=[0-2]*//g;'
}

disable_deprecation_warnings()
{
  apply_regex_to_cflags 's/$/ -Wno-deprecated-declarations/;'
}

disable_sizeof_warnings()
{
  apply_regex_to_cflags 's/$/ -Wno-sizeof-pointer-memaccess/;'
}

simple_cflags()
{
  export CFLAGS="$CFLAGS_SIMPLE"
  export CXXFLAGS="$CXXFLAGS_SIMPLE"
}

simple_ldflags()
{
  export LDFLAGS="$LDFLAGS_SIMPLE"
}

disable_cppflags()
{
  unset CPPFLAGS
}

disable_library_path()
{
  unset LD_LIBRARY_PATH
  unset DYLD_LIBRARY_PATH

  export LD_LIBRARY_PATH="$INITIAL_LD_LIBRARY_PATH"
  export DYLD_LIBRARY_PATH="$INITIAL_DYLD_LIBRARY_PATH"
}

remove_cppflags_from_cflags()
{
  export CFLAGS="$CFLAGS_SIMPLE $CFLAGS_INCLUDE"
  export CXXFLAGS="$CXXFLAGS"
}

prepend_paths()
{
  for dir in "$@"; do
    local bin="$dir/bin"
    local lib="$dir/lib"
    local pkg="$dir/lib/pkgconfig"
    export PATH="$bin${PATH:+:}$PATH"
    export PKG_CONFIG_PATH="$pkg${PKG_CONFIG_PATH:+:}$PKG_CONFIG_PATH"
    export LD_LIBRARY_PATH="$lib${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH"
    export DYLD_LIBRARY_PATH="$lib${DYLD_LIBRARY_PATH:+:}$DYLD_LIBRARY_PATH"
  done
}

append_path()
{
  for dir in "$@"; do
    local bin="$dir/bin"
    local lib="$dir/lib"
    local pkg="$dir/lib/pkgconfig"
    export PATH="$PATH${PATH:+:}$bin"
    export PKG_CONFIG_PATH="$PKG_CONFIG_PATH${PKG_CONFIG_PATH:+:}$pkg"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH${LD_LIBRARY_PATH:+:}$lib"
    export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH${DYLD_LIBRARY_PATH:+:}$lib"
  done
}

build_version()
{
  local name="$1"
  local cut_fields="$2"

  if [ -z "$cut_fields" ]; then
    cut_fields='-9'
  fi

  readlink "$name" | cut -d- -f2- \
    | sed -E 's/^v//;' | cut -d. -f"$cut_fields"
}

build_autoreconf()
{
  local name="$1"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && sh -c 'autoreconf -i') 2>&1 | log "$name" 't'

  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_autoconf()
{
  local name="$1"
  local configure_args="$2"
  local make_args="$3"
  local make_install_args="$4"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && sh -c "./configure $configure_args" \
    && sh -c "$MAKE $make_args" \
    && sh -c "$MAKE install $make_install_args") 2>&1 | log "$name"

  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_config()
{
  local name="$1"
  local config_args="$2"
  local make_args="$3"
  local make_install_args="$4"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && echo "./Configure $config_args $CFLAGS $build_platform" \
    && sh -c "./Configure $config_args $CFLAGS $build_platform" \
    && sh -c "$MAKE $make_args" \
    && sh -c "$MAKE install $make_install_args") 2>&1 | log "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

builder_normalize_platform()
{
  local platform="$1"

  if [[ "$platform" = x86_64* ]]; then
    rv='x64'
  elif [[ "$platform" = x86* ]]; then
    rv='x86'
  elif [[ "$platform" = i?86 ]]; then
    rv='x86'
  else
    rv='aarch64'
  fi

  echo "$rv"
}

builder_platform_to_architecture()
{
  local platform="$1"
  local bits="$2"

  local rv=''

  if [ -z "$platform" ]; then
    platform="`uname -m`"
  fi

  if [[ "$platform" = x86_64* ]]; then
    rv='intel'
  elif [[ "$platform" = x64* ]]; then
    rv='intel'
  elif [[ "$platform" = x86* ]]; then
    rv='intel'
  elif [[ "$platform" = i?86 ]]; then
    rv='intel'
  elif [[ "$platform" = armv6* ]]; then
    rv='armv6'
  elif [[ "$platform" = 'aarch64' ]]; then
    rv='aarch64'
  elif [ "$platform" = 'unknown' ]; then
    rv='aarch64'
  fi

  echo "$rv"
}

builder_platform_to_bits()
{
  local platform="$1"
  local bits="$2"

  if [[ "$platform" = x86_64* ]]; then
    bits='64'
  elif [[ "$platform" = x64* ]]; then
    bits='64'
  elif [[ "$platform" = x86* ]]; then
    bits='32'
  elif [[ "$platform" = i?86 ]]; then
    bits='32'
  elif [[ "$platform" = armv6* ]]; then
    bits='32'
  elif [[ "$platform" = 'aarch64' ]]; then
    bits='64'
  fi

  echo "$bits"
}

builder_fix_erlang_dso_linkage()
{
  local bits="$1"
  local name='fix-erlang-dso-linkage'

  builder_should_run "$name" || return 0

  (cd 'erlang' && erl_top="`pwd`" &&
   for dir in wx crypto asn1 runtime_tools; do
     (cd "lib/$dir/c_src" &&
       $MAKE clean opt ERL_TOP="$erl_top" LD="gcc -m$bits")
   done && $MAKE install) 2>&1 | log "$name"
  
   builder_check_status "$name" "${PIPESTATUS[0]}"
}

builder_remove_static_libraries()
{
  while [ "$#" -gt 0 ]; do
    local library_name="$1"
    shift 1
    rm -f "$prefix/lib/lib$library_name.a"
  done
}

builder_install_file()
{
  local name="$1"
  local source_path="$2"
  local target_path="$3"
  local target_directory="$target_path"

  builder_should_run "$name" || return 0

  if ! [ -d "$target_directory" ]; then
    target_directory="`dirname "$target_directory"`"
  fi

  mkdir -p "$target_directory" &&
  cp -a "$source_path" "$target_path"
  
  builder_check_status "$name" "$?"
}

builder_create_library_aliases()
{
  local name="$1"
  local prefix="$2"
  local from="$3"
  local to="$4"
  
  builder_should_run "$name" || return 0

  (cd "$prefix/lib" && for lib in "lib$from.so" "lib$from.so".*; do
    local symlink="`echo "$lib" | sed -E "s/$from/$to/;"`" &&
    ln -sf "$lib" "$symlink" || return "$?"
  done)
}

builder_set_library_executable_bits()
{
  local prefix="$1"

  find "$prefix" \( -name '*.so' -o -name '*.so.*' \) \
    -type f -exec chmod +x {} \;
}

builder_remove_library_metadata()
{
  local prefix="$1"

  find "$prefix" \
    -name '*.la' -type f -exec rm -f {} \;
}

builder_clear_java_directory()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  rm -rf "$prefix/java"
  return "$?"
}

build_make()
{
  local name="$1"
  local target="$2"
  local make_args="$3"
  local include_flags="$4"

  builder_should_run "$name" || return 0

  if [ "$include_flags" ]; then
    make_args="$make_args CFLAGS=\"$CFLAGS\" LDFLAGS=\"$LDFLAGS\""
  fi

  (cd "$name" \
    && sh -c "$MAKE $target $make_args") 2>&1 | log "$name"
   
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_make_install()
{
  local name="$1"
  local prefix="$2"
  local make_args="$3"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && sh -c "$MAKE $make_args CFLAGS=\"$CFLAGS\" LDFLAGS=\"$LDFLAGS\"" \
    && sh -c "$MAKE install $make_args PREFIX=\"$prefix\"") 2>&1 | log "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_npm_remote()
{
  local name="$1"
  local prefix="$2"
  local is_native="$3"

  builder_should_run "$name" || return 0

  local args='-g --verbose --unsafe-perm'

  (unset MAKE && "$prefix/bin/npm" \
    install $args "$name") 2>&1 | log "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_ant()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    sh ./build.sh -Ddist.dir="$prefix/java" dist) 2>&1 | log "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_maven()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  # Required for build
  export M2_HOME="$prefix/java"

  (cd "$name" &&
    yes 'yes' | "$prefix/java/bin/ant";
     rv="${PIPESTATUS[1]}"; exit "$rv") 2>&1 | log "$name"

  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_bzip2()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  ( (cd "$name" &&
     make -f Makefile-libbz2_so &&
     make install PREFIX="$prefix" &&
     cp -P libbz2.so.* "$prefix/lib") &&
    \
    (cd "$prefix/lib" &&
     ln -sf libbz2.so.1.0 libbz2.so.1) ) 2>&1 | log "$name" 
}

build_cmake()
{
  local name="$1"
  local prefix="$2"
  local cmake_args="$3"

  builder_should_run "$name" || return 0
  cmake_args="-DCMAKE_INSTALL_PREFIX="$prefix" $cmake_args"

  (cd "$name" && cmake $cmake_args &&
    make && make install) 2>&1 | log "$name"
}

build_couchdb()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    ./configure &&
    PREFIX="$prefix" make release &&
    cp -av ./rel/couchdb "$prefix/" &&
    chown -R root:root "$prefix/couchdb") 2>&1 | log "$name"
}

build_rebar()
{
  local name="$1"
  local prefix="$2"
  local command="$3"
  local final_binary="$4"

  builder_should_run "$name" || return 0

  if [ -z "$command" ]; then
    command="make"
  fi

  if [ -z "$final_binary" ]; then
    final_binary="$name"
  fi

  (cd "$name" && "$command" &&
    chmod +x "$final_binary" &&
    mv "$final_binary" "$prefix/bin") 2>&1 | log "$name"
}

fix_libtool()
{
  for dir in "$@"; do
    (cd "$dir" &&
      libtoolize --automake --copy &&
      aclocal -I config && autoheader &&
      automake --add-missing --copy && autoconf) 2>/dev/null \
        || fatal "Unable to regenerate libtool files for '$dir'"
  done

  return 0
}

builder_initialize()
{
  last_pkg_file="`mktemp /tmp/builder-XXXXXXXX`"
  run_status_file="`mktemp /tmp/builder-XXXXXXXX`"
  last_version_file="`mktemp /tmp/builder-XXXXXXXX`"

  trap builder_cleanup EXIT
}

builder_check_status()
{
  local name="$1"
  local pipe_status="$2"

  if [ "$pipe_status" -ne 0 ]; then
    echo >&2
    echo "A failure occurred while building '$name':" >&2
    echo "  Subprocess exited with a status code of $pipe_status." >&2
    echo "  Please check the source tree for problems and retry." >&2
    echo >&2
    exit "$pipe_status"
  fi

  true
}

builder_cleanup()
{
  rm -f "$run_status_file" "$last_pkg_file" "$last_version_file"
}

builder_should_run()
{
  local pkg="`echo "$1" | sed -E 's/\//-/g;'`"
  local version="$2"

  local run_status="`cat "$run_status_file"`"

  local last_pkg="`cat "$last_pkg_file"`"
  local last_version="`cat "$last_version_file"`"

  # Package may have multiple build steps:
  #   If we've already seen the name of the package we're supposed
  #   to stop on, continue executing steps until the name changes.

  if [ "$run_status" -lt 0 ]; then
    if [ "$pkg $version" != "$last_pkg $last_version" ]; then
      run_status='1' # State: stopped
      echo -n "$run_status" > "$run_status_file"
    fi
    return "$run_status"
  fi

  # Check for start, stop:
  #   This lets you specify inclusive ranges of packages to build.

  if [ "$run_status" -eq 0 ]; then
    if [ "$pkg_stop" -a "$last_pkg $last_version" = "$pkg_stop $pkg_stop_version" ]; then
      if [ "$pkg $version" != "$last_pkg $last_version" ]; then
        run_status='1' # State: stopped
      else
        run_status='-1' # State: stopping
      fi
      echo -n "$run_status" > "$run_status_file"
    fi
  else
    if [ "$pkg_start" -a "$pkg $version" = "$pkg_start $pkg_start_version" ]; then
      run_status='0' # State: running
      echo -n "$run_status" > "$run_status_file"
    fi
  fi;

  echo -n "$pkg" > "$last_pkg_file"
  echo -n "$version" > "$last_version_file"

  [ "$run_status" -le 0 ]
  return "$?"
}

builder_setup_cache()
{
  if [ "$DISABLE_CACHE" ]; then
    return 0
  fi

  [ -z "$CC" ] && export CC='gcc'
  [ -z "$CXX" ] && export CXX='g++'
  [ -z "$HOSTCC" ] && export HOSTCC='gcc'
  [ -z "$HOSTCXX" ] && export HOSTCXX='g++'

  if which ccache &>/dev/null; then
    export CC="ccache $CC"
    export CXX="ccache $CXX"
    export HOSTCC="ccache $HOSTCC"
    export HOSTCXX="ccache $HOSTCXX"
    export CACHE_ENABLED='ccache'
    return 0
  fi

  return 1
}

builder_setup_globals()
{
  pkg_start="$1"
  timestamp="`date +%Y%m%d-%H%M%S`"

  if [ "$pkg_start" ]; then
    echo -n 1 > "$run_status_file"
  else
    echo -n 0 > "$run_status_file"
  fi

  unset PLATFORM
  prepend_paths "$prefix"
}


builder_setup_environment()
{
  prefix="$1"
  pkg_start="$2"
  pkg_start_version="$3"
  pkg_stop="$4"
  pkg_stop_version="$5"
  uname="$6"
  architecture="$7"
  bits="$8"
  parallel="$9"

  builder_setup_globals "$pkg_start"

  if which gmake &>/dev/null; then
    export MAKE='gmake'
  else
    export MAKE='make'
  fi

  export CC='gcc'
  export CXX='g++'
  export HOSTCC="$CC"
  export HOSTCXX="$CXX"
  export GNUMAKE="$MAKE"

  export INITIAL_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
  export INITIAL_DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH"

  builder_detect_system \
    || fatal 'Unsupported system; please edit Makefile'

  if [ "$bits" -eq 64 ]; then
    (cd "$prefix" && rm -rf lib64 && mkdir -p lib && ln -s lib lib64) \
      || fatal 'Failed to create symbolic link for 64-bit libraries'
  fi

  if [ "$parallel" ]; then
    export MAKE="$MAKE -j$parallel"
  fi

  if [ "$uname" = 'Darwin' -a "$architecture" = 'intel' -a "$bits" -eq 32 ]; then
    export LDFLAGS_SIMPLE="-arch i386"
  fi

  export CFLAGS_INCLUDE="-I$prefix/include"
  export CPPFLAGS_SIMPLE="-D_FORTIFY_SOURCE=2 -P"
  export CFLAGS_SIMPLE="-Os -fstack-protector-strong"

  if [ "$architecture" = 'intel' ]; then
    export CFLAGS_SIMPLE="$CFLAGS_SIMPLE -m$bits"
  elif [[ "$architecture" = armv6* ]]; then
    local cflags_arch="-march=armv6 -mfpu=vfp -mfloat-abi=hard"
    export CFLAGS_SIMPLE="$CFLAGS_SIMPLE $cflags_arch"
  fi

  export CPPFLAGS="$CPPFLAGS_SIMPLE"
  export LDFLAGS="$LDFLAGS_SIMPLE -L$prefix/lib"
  export CFLAGS="$CFLAGS_SIMPLE $CFLAGS_INCLUDE $CPPFLAGS"

  export CXXFLAGS="$CFLAGS"
  export CXXFLAGSSIMPLE="$CFLAGS_SIMPLE"

  return 0
}

builder_detect_system()
{
  # Ensure `uname` is set
  if [ -z "$uname" ]; then
    uname="`uname -s`"
  fi

  # Ensure `platform` is set
  if [ -z "$platform" ]; then
    local machine="`uname -m`"
    platform="`builder_normalize_platform "$machine"`"
  fi

  # Guess machine word size if necessary
  if [ -z "$bits" ]; then
    if [ "`echo "$platform" | grep 64$`" ]; then
      bits='64'
    else
      bits='32'
    fi
  fi

  # Ensure architecture is set
  if [ -z "$architecture" ]; then
    architecture="`builder_platform_to_architecture "$platform"`"
  fi

  # Detect architecture/platform
  if [ "$architecture" = 'intel' ]; then
    if [ "$uname" = 'Darwin' ]; then
        if [ "$bits" -eq 64 ]; then
          build_cpu='x64'
          build_platform="darwin64-x86_64-cc"
          build_arch="x86_64-apple-darwin10.0.0"
          build_extra_options="--enable-darwin-64bit"
        else
          build_cpu='ia32'
          build_platform="darwin-i386-cc"
          build_arch="i386-apple-darwin10.0.0"
          build_extra_options="--enable-darwin-32bit"
        fi
    elif [ "$uname" = 'Linux' ]; then
       if [ "$bits" -eq 64 ]; then
          build_cpu='x64'
          build_platform="linux-elf"
          build_arch="x86_64-linux-gnu"
        else
          build_cpu='ia32'
          build_platform="linux-elf"
          build_arch="i586-linux-gnu"
        fi
    fi
  elif [[ "$architecture" = 'aarch64' ]]; then
    build_cpu='aarch64'
    build_platform="linux-aarch64"
    build_arch="arm-linux-gnueabihf"
  fi

  if [ -z "$build_cpu" -o -z "$build_arch" -o -z "$build_platform" ]; then
    echo 'Warning: Unrecognized or unsupported architecture' >&2
    return 1
  fi

  return 0
}


